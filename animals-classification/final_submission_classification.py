# -*- coding: utf-8 -*-
"""final submission classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rWFJTdl34vr8XfwiwjJaVgAvrsLDy0to
"""

!nvidia-smi

from google.colab import drive
drive.mount('/content/drive/')
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import tensorflow as tf
from sklearn.model_selection import train_test_split
from keras.callbacks import ReduceLROnPlateau
import cv2
from matplotlib import pyplot as plt
from glob import glob
import os
from bs4 import BeautifulSoup as bs
import time
import cv2
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Activation, Dropout, Flatten
from tensorflow.keras.layers import Conv2D, GlobalAveragePooling2D
from tensorflow.keras.layers import MaxPooling2D, BatchNormalization
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.callbacks import ModelCheckpoint
from tensorflow.keras.regularizers import l2
from tensorflow.keras.layers import LeakyReLU, ReLU, Dropout, concatenate
!pip install tensorflow-addons
import tensorflow_addons as tfa
from tensorflow_addons.layers import InstanceNormalization

!mkdir -p ~/.kaggle
!mkdir dataset2
#upload kaggle.json manually
!cp ./dataset2/kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

!kaggle datasets download -d ashishsaxena2209/animal-image-datasetdog-cat-and-panda

!unzip animal-image-datasetdog-cat-and-panda.zip -d dataset2
!ls dataset2

def preprocessing(img):
    img = cv2.resize(img, (128, 128))
    img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    img = cv2.blur(img,(5,5))
    img = np.double(img)
    img = cv2.normalize(img, None, 1.0, 0.0, cv2.NORM_MINMAX)
    return img
  
def tampil(img):
  plt.figure(figsize=(10,10))
  plt.axis("off")
  plt.imshow(img,cmap="gray")

x = []
y = []

limit_data = 2000
idx = 0
for folder in sorted(glob("./dataset2/animals/cats/*")):
  img = cv2.imread(folder)
  img = preprocessing(img)
  x.append(img)
  y.append('a cat')
print(len(x))
for folder in sorted(glob("./dataset2/animals/dogs/*")):
  img = cv2.imread(folder)
  img = preprocessing(img)
  x.append(img)
  y.append('a dog')
print(len(x))
for folder in sorted(glob("./dataset2/animals/panda/*")):
  img = cv2.imread(folder)
  img = preprocessing(img)
  x.append(img)
  y.append('a panda')
print(len(x))


  
x = np.array(x)
y = np.array(y)

onehot_encoder = OneHotEncoder(sparse=False)
y = np.expand_dims(y, axis=1)
y = onehot_encoder.fit_transform(y)

tampil(x[0])
print(x.shape)
print(y.shape)

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)
print("Jumlah data    : " + str(x.shape) + " " + str(y.shape))
print("Jumlah training: " + str(x_train.shape) + " " + str(y_train.shape))
print("Jumlah testing : " + str(x_test.shape) + " " + str(y_test.shape))

augs_gen = ImageDataGenerator(
    featurewise_center=True,
    featurewise_std_normalization=True,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True)

augs_gen_val = ImageDataGenerator(
    featurewise_center=True,
    featurewise_std_normalization=True,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True)

from tensorflow.keras import Model, Sequential

model_conv = Sequential()
model_conv.add(Conv2D(32, 3, padding='same', activation='relu', kernel_regularizer=l2(3e-5)))
model_conv.add(InstanceNormalization())
model_conv.add(ReLU())
model_conv.add(Dropout(0.3))
model_conv.add(MaxPooling2D(pool_size=(2, 2)))
model_conv.add(Conv2D(64, 3, padding='same', activation='relu', kernel_regularizer=l2(3e-5)))
model_conv.add(InstanceNormalization())
model_conv.add(tf.keras.layers.ReLU())
model_conv.add(Dropout(0.3))
model_conv.add(MaxPooling2D(pool_size=(2, 2)))
model_conv.add(Conv2D(128, 3, padding='same', activation='relu', kernel_regularizer=l2(3e-5)))
model_conv.add(InstanceNormalization())
model_conv.add(tf.keras.layers.ReLU())
model_conv.add(Dropout(0.3))
model_conv.add(MaxPooling2D(pool_size=(2, 2)))
model_conv.add(Conv2D(256, 3, padding='same', activation='relu', kernel_regularizer=l2(3e-5)))
model_conv.add(InstanceNormalization())
model_conv.add(tf.keras.layers.ReLU())
model_conv.add(Dropout(0.3))
model_conv.add(MaxPooling2D(pool_size=(2, 2)))
model_conv.add(Conv2D(128, 3, padding='same', activation='relu', kernel_regularizer=l2(3e-5)))
model_conv.add(InstanceNormalization())
model_conv.add(tf.keras.layers.ReLU())
model_conv.add(Dropout(0.3))
model_conv.add(MaxPooling2D(pool_size=(2, 2)))
model_conv.add(Conv2D(64, 3, padding='same', activation='relu', kernel_regularizer=l2(3e-5)))
model_conv.add(InstanceNormalization())
model_conv.add(tf.keras.layers.ReLU())
model_conv.add(Dropout(0.3))
model_conv.add(MaxPooling2D(pool_size=(2, 2)))
model_conv.add(Conv2D(32, 3, padding='same', activation='relu', kernel_regularizer=l2(3e-5)))
model_conv.add(InstanceNormalization())
model_conv.add(tf.keras.layers.ReLU())
model_conv.add(Dropout(0.3))
model_conv.add(MaxPooling2D(pool_size=(2, 2)))
model_conv.add(GlobalAveragePooling2D())
model_conv.add(Dense(3, activation='softmax', kernel_regularizer=l2(3e-5)))


optimizer = tf.keras.optimizers.Adam(lr=0.0001)
model_conv.compile(loss=tf.keras.losses.categorical_crossentropy,
              optimizer=optimizer,
              metrics=["accuracy"])

print(x_train[0])

batch_size = 32
num_train_samples = len(x_train) / batch_size
#x_train = np.expand_dims(x_train, -1)
#x_test = np.expand_dims(x_test, -1)

filepath="/content/gdrive/My Drive/submissionClassification.h5"
checkpoint = ModelCheckpoint(filepath, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')
rlrop = ReduceLROnPlateau(monitor='loss', factor=0.1, patience=30)
callbacks_list = [checkpoint, rlrop]
#penggunaan scheduler, malah membuat model terjebak di local minima
history = model_conv.fit(augs_gen.flow(x_train, y_train, batch_size = batch_size, shuffle=True), steps_per_epoch=num_train_samples, epochs=800, 
                    verbose=1, validation_data=(x_test, y_test), callbacks = callbacks_list)

print(model_conv.summary())

plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'validation'], loc='upper left')
plt.show()

converter = tf.lite.TFLiteConverter.from_keras_model(model_conv)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
  f.write(tflite_model)